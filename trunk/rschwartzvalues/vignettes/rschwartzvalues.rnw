% -*- mode: noweb; noweb-default-code-mode: R-mode; -*-
\documentclass[a4paper]{article}
\title{rschwartzvalues vignette}
\author{Andy South\footnote{{\tt southandy at gmail.com}}}

%\VignetteIndexEntry{rschwartzvalues vignette : examples to get started}
%\VignetteDepends{xtable}

\SweaveOpts{echo=TRUE,print=FALSE, width=7, height=3.7, eps=FALSE} %default width and height for figures
\usepackage{Sweave}
\usepackage{a4wide}
%\usepackage{a4}
%\usepackage{graphicx}
\usepackage[colorlinks=true,urlcolor=blue]{hyperref}

%this to ensure R code wraps onto next line
<<echo=FALSE>>=
options(width=70)
@
%loading package for first fig
<<echo=FALSE,print=FALSE>>= 
library(rschwartzvalues)
@

%this code used in setting up all figures later
<<plotSetup,echo=FALSE,print=FALSE>>=
par(mai=c(0.2,0,0.2,0)) #(b, l, t, r)
@


\begin{document}
\maketitle

%text that is put directly into the document
\large{rschwartzvalues is a package for conducting Schwartz values analyses.
This includes deriving 'Value sets' from responses to Schwartz values survey questions
and creating plots like the one shown below (sometimes termed rose, coxcomb, circumplex
or polar area plots).}\newline

\begin{center}
<<fig1,fig=TRUE,echo=FALSE,results=hide>>= 
<<plotSetup>>
#to access the test data provided in the package
data(dFtestData21)
#to calculate value sets
dF <- valueSets(dFtestData21,numQs=21)
print(dF,row.names=FALSE)
#to produce a plot for one of the groups
rosePlot(dF, names='setName', values='group6', textSize=0.7)
@
\end{center}

This vignette shows a few examples of the main {\tt rschwartzvalues} functions to get you
started. To access this file type {\tt vignette("rschwartzvalues")} in the R console.
To access the full help system, type {\tt ?rschwartzvalues} in the R console.


\tableofcontents
\vspace{0.5 cm}

\section{Loading rschwartzvalues}
%\vspace{1 cm}
First save the package file {\tt rschwartzvalues\_1.0.tar.gz} locally, then type the 
following command in to the R console, providing the path to the file.
\newline
{\tt install.packages("rschwartzvalues\_1.0.tar.gz", repos = NULL, type='source') }.
You only need to do this once.
At the start of each R session load {\tt rschwartzvalues} by typing the following.
<<echo=TRUE,print=FALSE>>=
library(rschwartzvalues)
@

%\vspace{0.5 cm}

\section{Getting your data in}

To analyse question responses you need to read your data in to a dataframe with
columns specifying the question responses and a row for each individual. 
It is important that columns are in the same order as the question ordering 
shown in the appendix. The names of the columns do not matter. 
Optionally you can provide a first column specifying the segment or any other 
group label.\newline 

Larger positive responses will generate larger sectors in the plots. 
Because of this you should ensure that your data are coded with increasing values for 
increasing preference, e.g. from 0 for 'not important' to 5 for 'extremely important'.\newline


Questions not answered, missing data or 'I don't know' responses should be coded as NA in the input file
, and will be excluded from the mean calculations.
There is a dataframe included in the package ({\tt dFtestData21}) showing how the data should
be formatted. The code below shows how the test data can be accessed and displays
the first 14 columns using the {\tt xtable} package. 
(xtable is used just to format the table and is not essential for use of this package).


\begin{center}
<<fig=FALSE,echo=TRUE,results=tex>>= 
#to access the test data provided in the package
data(dFtestData21)
library(xtable)
print(xtable(dFtestData21[1:14]),include.rownames=FALSE)
@
\end{center}

%to get the table immediately after the code due to pagebreak
\vspace{3 cm}

\section{Using valueSets() and rosePlot() for the 21 question survey}

The code below shows how you can use {\tt valueSets()} to aggregate the raw responses
into 'value sets' for each group producing results as a dataframe. 
Then you can use {\tt rosePlot()}
to plot the value sets for one of the groups.

\begin{center}
<<fig2,fig=TRUE,echo=TRUE>>= 
<<plotSetup>>
#to access the test data provided in the package
data(dFtestData21)
#to calculate value sets
dF <- valueSets(dFtestData21,numQs=21)
print(dF,row.names=FALSE)
#to produce a plot for one of the groups
rosePlot(dF, names='setName', values='group6', textSize=0.7)
#to output valueSets results to a csv
#write.csv( dF, "valueSets.csv", row.names = F )
@
\end{center}


By default {\tt valueSets()} centres the values by calculating the difference from
the mean response. To turn centering off set 
{\tt centering=FALSE}.
The code below shows how this produces different results.
\begin{center}
<<fig=FALSE,echo=TRUE>>= 
#to access the test data provided in the package
data(dFtestData21)
#to calculate value sets
dF <- valueSets(dFtestData21,centering=FALSE,numQs=21)
print(dF,row.names=FALSE)
@
\end{center}

{\tt rosePlot()} by default sets the outer circumference of the circle to the 
maximum value from your data. You can set the value for the outer edge using
the {\tt maxValue} argument as shown below. This allows comparison between 
different datasets even if they have a different maximum. If you know the upper 
end of your scale it is a good idea to set {\tt maxValue} to avoid potential 
confusion.   
\begin{center}
<<fig3,fig=TRUE,echo=TRUE>>= 
<<plotSetup>>
rosePlot(dF, names='setName', values='group6', textSize=0.7
        , maxValue = 10 )
@
\end{center}

There are many options for saving plots to a file. From windows you can simply 
type {\tt savePlot("myFile.pdf",type='pdf'))}.

\section{Using valueSetsPlots() to produce quick plots for all groups in a file}
To do a quick analysis of all the groups in your file producing one plot for 
each group type :
{\tt valueSetsPlots(dFtestData21,numQs=21)}


\section{For 57 question surveys}
57 question Schwartz values surveys can be analysed and plotted by setting {\tt numQs=57}.

\begin{center}
<<fig57qs,fig=TRUE,echo=TRUE>>= 
<<plotSetup>>
#to access the test data provided in the package
data(dFtestData57)
#to calculate value sets
dF <- valueSets(dFtestData57,numQs=57)
print(dF,row.names=FALSE)
#to produce a plot for one of the groups
rosePlot(dF, names='setName', values='group1', textSize=0.7)
@
\end{center}

\section{Input data on a scale of -1 to 9}
If your data uses a scale with a minimum of -1, {\tt valueSets()} will
automatically add 1 to all responses. This is because negative values do not show
up in {\tt rosePlot()}. If you do not wish the 1 to be added you can set {\tt addToNeg=FALSE}
in {\tt valueSets()}. 


\section{Modifying plot appearance}
% BEWARE ! the plots below use dF created in the previous
A series of commands showing how the appearance of plots can be modified.
\begin{center}
<<figAppearance1,fig=TRUE,echo=TRUE,results=hide>>= 
<<plotSetup>>
#to calculate value sets
dF <- valueSets(dFtestData21,centering=FALSE,numQs=21)
rosePlot(dF, names='setName', values='group6', textSize=0.7
        , gridCol='grey', bgCol='grey', ringCol='red'
        , title="gridCol='grey',bgCol='grey',ringCol='red'")
@
\end{center}

\begin{center}
<<figAppearance2,fig=TRUE,echo=TRUE,results=hide>>= 
<<plotSetup>>
rosePlot(dF, names='setName', values='group6', textSize=0.7
        , gridThick=0.2
        , title='thinner gridlines' )
@
\end{center}

\begin{center}
<<figAppearance3,fig=TRUE,echo=TRUE,results=hide>>= 
<<plotSetup>>
rosePlot(dF, names='setName', values='group6', textSize=0.7
        , ringCol='purple', textCol='white' )
@
\end{center}

\begin{center}
<<figAppearance4,fig=TRUE,echo=TRUE,results=hide>>= 
<<plotSetup>>
rosePlot(dF, names='setName', values='group6', textSize=0.7
        , ringWidth=0.4, title="reduced ring width")
@
\end{center}

\begin{center}
<<figAppearance5,fig=TRUE,echo=TRUE,results=hide>>= 
<<plotSetup>>
rosePlot(dF, names='setName', values='group6', textSize=0.7
        , palette='grey', title="palette='grey'")
@
\end{center}


The interval bewteen the circular gridlines is set to 1 by default, you can change this
using the gridInterval parameter.
\begin{center}
<<figAppearance6,fig=TRUE,echo=TRUE,results=hide>>= 
<<plotSetup>>
rosePlot(dF, names='setName', values='group6', textSize=0.7
        , gridInterval=2, title="increased grid interval" )
@
\end{center}


\section{Using rosePlot() on other data}

You can also use {\tt rosePlot()} to create a plot from any combination of text labels
and values passed as a dataframe. The code below shows how you can create a 
dataframe containing labels and values to pass to {\tt rosePlot()}.

\begin{center}
<<figRosePlot,fig=TRUE,echo=TRUE,results=hide>>= 
<<plotSetup>>
iNames <- (c('Love','Hate','Indifference'))
iValues <- c(6,4,2)
dF <- data.frame(names=iNames, values=iValues)
rosePlot(dF, names='names', values='values') 
@
\end{center}

\section{Further information}
For further information on work on values and sustainability contact Richard Hawkins rich@pirc.info.
For work on values in the context of the welsh government contact Andrew Darnton ad@andrewdarnton.co.uk.
For more details about Schwartz values analysis see :
\newline
{\tt http://mypersonality.org/wiki/doku.php?id=schwartz\_s\_values\_survey} \newline
If you have any technical questions or would like to contribute, please contact the author
at southandy@gmail.com. 

\section{Appendix : ordering of questions and contribution to value sets }
It is important that question responses are ordered correctly within data files 
prior to analyses. You can check on the order of the questions and the value sets 
that they contribute to by accessing the lookup tables as shown below.
\newline
\large{21 questions} 
<<fig=FALSE,echo=TRUE,results=tex>>= 
library(xtable)
data(dFlookup21)
print(xtable(dFlookup21[,c(1,2,5)]),include.rownames=FALSE)
@

\large{57 questions}  
<<fig=FALSE,echo=TRUE,results=tex>>= 
library(xtable)
data(dFlookup57)
print(xtable(dFlookup57[,c(1,2,5)]),include.rownames=FALSE)
@

 
\end{document}